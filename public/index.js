// Generated by CoffeeScript 1.6.2
(function() {
  var HHG, LocationControl, RoutesControl, View,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HHG = {};

  window.HHG = HHG;

  View = (function() {
    function View(options) {
      this.$el = options.el;
    }

    return View;

  })();

  LocationControl = (function(_super) {
    __extends(LocationControl, _super);

    function LocationControl() {
      LocationControl.__super__.constructor.apply(this, arguments);
      this.$categories = $("<select />").appendTo(this.$el);
      this.$locations = $("<select />").appendTo(this.$el);
    }

    LocationControl.prototype.renderItem = function(item) {
      return item.name;
    };

    LocationControl.prototype.sortItem = function(item) {
      return item.name;
    };

    LocationControl.prototype.render = function(curLoc) {
      var category, _i, _len, _ref,
        _this = this;

      console.log(curLoc);
      this.$categories.empty();
      this.$locations.empty();
      _ref = _.keys(HHG.categories);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        category = _ref[_i];
        this.$categories.append($("<option />").text(category));
      }
      this.$categories.on("change", function() {
        var l, location, oppositeLocationId, _j, _len1, _ref1;

        _this.$locations.empty();
        oppositeLocationId = curLoc ? false : _this.opposite.$locations.val();
        _ref1 = _.sortBy((function() {
          var _k, _len1, _ref1, _results;

          _ref1 = HHG.categories[this.$categories.val()];
          _results = [];
          for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
            l = _ref1[_k];
            if (l.id !== oppositeLocationId) {
              _results.push(l);
            }
          }
          return _results;
        }).call(_this), _this.sortItem);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          location = _ref1[_j];
          _this.$locations.append($("<option />").text(_this.renderItem(location)).prop({
            value: location.id
          }));
        }
        if (curLoc) {
          _this.$locations.val(curLoc.id);
        }
        return _this.$locations.trigger("change");
      });
      if (curLoc) {
        this.$categories.val(curLoc.category[0]);
      }
      this.$categories.trigger("change");
      return this;
    };

    return LocationControl;

  })(View);

  RoutesControl = (function(_super) {
    __extends(RoutesControl, _super);

    function RoutesControl() {
      var _this = this;

      RoutesControl.__super__.constructor.apply(this, arguments);
      this.$el.on("click", ".checkStep", function() {
        return _this.nextStep();
      });
    }

    RoutesControl.prototype.render = function() {
      var fromPlace, toPlace;

      this.$el.empty();
      fromPlace = HHG.fromControl.$locations.val();
      toPlace = HHG.toControl.$locations.val();
      if (!fromPlace || !toPlace) {
        return;
      }
      this.$el.append($("<h4 />").text("A: " + HHG.places[fromPlace].name + ": " + HHG.places[fromPlace].address));
      this.$el.append($("<h4 />").text("B: " + HHG.places[toPlace].name + ": " + HHG.places[toPlace].address));
      console.log({
        fromPlace: fromPlace,
        toPlace: toPlace
      });
      return this.drawRoutes(HHG.directions[fromPlace][toPlace].routes);
    };

    RoutesControl.prototype.drawRoutes = function(routes) {
      var route, step, stepEl, _i, _j, _len, _len1, _ref,
        _this = this;

      this.activeStep = void 0;
      this.steps = [];
      for (_i = 0, _len = routes.length; _i < _len; _i++) {
        route = routes[_i];
        _ref = route.legs[0].steps;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          step = _ref[_j];
          this.$el.append(stepEl = $("<div />").addClass("step").html($("<button />").html("âœ“").addClass("checkStep")).append(step.html_instructions + (" - " + step.distance.text + " - " + step.duration.text)));
          this.steps.push(stepEl);
        }
      }
      this.$el.append(this.$arrivedButton = $("<button />").hide().text("Arrived at " + HHG.places[HHG.toControl.$locations.val()].name).click(function() {
        var $giveRating, $makeNotes;

        _this.$arrivedButton.replaceWith($("<h4 />").text(_this.$arrivedButton.text() + " - " + (new Date).toLocaleTimeString()));
        _this.$el.append($makeNotes = $("<button />").text("make notes").click(function() {
          return $makeNotes.replaceWith($("<div />").html($("<textarea />")));
        }));
        _this.$el.append($giveRating = $("<button />").text("give rating").click(function() {
          return $giveRating.replaceWith($("<div />").html($("<select />").append($("<option />").text(0)).append($("<option />").text(1)).append($("<option />").text(2)).append($("<option />").text(3)).append($("<option />").text(4)).append($("<option />").text(5))));
        }));
        _this.$el.append($("<button />").text("go somewhere from here").click(function() {
          HHG.A = HHG.toControl.$locations.val();
          HHG.B = false;
          return HHG.render();
        }));
        return _this.$el.append($("<button />").text("go back to " + HHG.places[HHG.fromControl.$locations.val()].name).click(function() {
          HHG.A = HHG.toControl.$locations.val();
          HHG.B = HHG.fromControl.$locations.val();
          return HHG.render();
        }));
      }));
      this.setStep(0);
      return this;
    };

    RoutesControl.prototype.setStep = function(num) {
      if (this.activeStep != null) {
        this.steps[this.activeStep].addClass("pastStep");
      }
      this.$el.find(".activeStep").removeClass("activeStep");
      if (num === this.steps.length) {
        this.$arrivedButton.show();
      } else {
        this.activeStep = num;
        this.steps[this.activeStep].addClass("activeStep");
      }
      return this;
    };

    RoutesControl.prototype.nextStep = function() {
      return this.setStep(this.activeStep + 1);
    };

    return RoutesControl;

  })(View);

  $(function() {
    return $.getJSON("places.json", function(result) {
      var category, details, i, locationId, _i, _len, _ref, _ref1;

      HHG.places = result;
      HHG.categories = {};
      HHG.subcategories = {};
      _ref = HHG.places;
      for (locationId in _ref) {
        details = _ref[locationId];
        details.id = locationId;
        _ref1 = details.category;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          category = _ref1[i];
          if (i === 0) {
            if (!HHG.categories[category]) {
              HHG.categories[category] = [];
            }
            HHG.categories[category].push(details);
          } else {
            if (!HHG.subcategories[category]) {
              HHG.subcategories[category] = [];
            }
            HHG.subcategories[category].push(details);
          }
        }
      }
      return $.getJSON("directions.json", function(result) {
        HHG.directions = result;
        HHG.routesControl = new RoutesControl({
          el: $(".routes")
        });
        HHG.fromControl = new LocationControl({
          el: $(".fromLocation .locationControl")
        });
        HHG.toControl = new LocationControl({
          el: $(".toLocation .locationControl")
        });
        HHG.fromControl.opposite = HHG.toControl;
        HHG.toControl.opposite = HHG.fromControl;
        HHG.toControl.renderItem = function(item) {
          var leg, _ref2, _ref3;

          if (leg = (_ref2 = HHG.directions[HHG.fromControl.$locations.val()]) != null ? (_ref3 = _ref2[item.id]) != null ? _ref3.routes[0].legs[0] : void 0 : void 0) {
            return item.name + (" - " + leg.distance.text + " - " + leg.duration.text);
          }
        };
        HHG.toControl.sortItem = function(item) {
          var _ref2, _ref3;

          return (_ref2 = HHG.directions[HHG.fromControl.$locations.val()]) != null ? (_ref3 = _ref2[item.id]) != null ? _ref3.routes[0].legs[0].distance.value : void 0 : void 0;
        };
        HHG.fromControl.$locations.on({
          change: function() {}
        });
        HHG.toControl.$locations.on({
          change: function() {
            return HHG.routesControl.render();
          }
        });
        HHG.fromControl.render();
        HHG.toControl.render();
        return HHG.render = function() {
          HHG.fromControl.render(HHG.A ? HHG.places[HHG.A] : false);
          return HHG.toControl.render(HHG.B ? HHG.places[HHG.B] : false);
        };
      });
    });
  });

}).call(this);
